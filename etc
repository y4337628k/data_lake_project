import configparser
from datetime import datetime
import os
from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql.types import TimestampType
from pyspark.sql.functions import udf, col
from pyspark.sql.functions import year, month, dayofmonth, hour, weekofyear, date_format, dayofweek


config = configparser.ConfigParser()
config.read('dl.cfg')

os.environ['AWS_ACCESS_KEY_ID']=config['AWS']['AWS_ACCESS_KEY_ID']
os.environ['AWS_SECRET_ACCESS_KEY']=config['AWS']['AWS_SECRET_ACCESS_KEY']


def create_spark_session():
    spark = SparkSession \
        .builder \
        .config("spark.jars.packages", "org.apache.hadoop:hadoop-aws:2.7.0") \
        .getOrCreate()
    return spark


def process_song_data(spark, input_data, output_data):
    
    song_data = input_data + 'song_data/A/A/A/*.json'
    
    df = spark.read.json(song_data)

    songs_table = df.select(['song_id', 'title', 'artist_id', 'year', 'duration']).dropDuplicates()
    
    songs_table.write.mode('overwrite').partitionBy("year", "artist_id").parquet(output_data+'songs_info')

    artists_table = df.select(['artist_id', 'artist_name', 'artist_location', 'artist_latitude', 'artist_longitude']).dropDuplicates()
    
    artists_table.write.mode('overwrite').parquet(output_data+'artists_info')


def process_log_data(spark, input_data, output_data):

    log_data = input_data + 'log_data/2018/11/*.json'

    df = spark.read.json(log_data)
     
    df.createOrReplaceTempView("for_users")
    
    users_table = spark.sql("""
                            SELECT DISTINCT userId as user_id, 
                            firstName as first_name,
                            lastName as last_name,
                            gender,
                            level,
                            ts
                            FROM for_users
                            WHERE userId IS NOT NULL
                        """)
    
    users_table.write.mode('overwrite').parquet(output_data+'users_info')

    get_timestamp = udf(lambda x: datetime.fromtimestamp(x/1000), TimestampType())
    
    df_update = df.filter(df.page == 'NextSong').select(['ts', 'userId', 'level', 'song', 'artist', 'sessionId', 'location', 'userAgent'])
    
    df_update = df_update.withColumn("start_time", get_timestamp(df_update.ts))
                                     
    time_table = df_update.select('start_time')
                                     
    time_table = time_table.withColumn("hour", hour('start_time')).withColumn("day", dayofmonth('start_time')).withColumn("week", weekofyear('start_time')).withColumn("month", month('start_time')).withColumn("year", year('start_time')).withColumn("weekday", dayofweek('start_time'))
    
    time_table.write.mode('overwrite').partitionBy("year", "month").parquet(output_data+'time_info')

    song_df = spark.read.parquet(output_data+'songs_info')
    
    artist_df = spark.read.parquet(output_data+'artists_info')

    df_update = df_update.withColumn('songplay_id', F.monotonically_increasing_id())
    
    song_df.createOrReplaceTempView('songs')
    
    artist_df.createOrReplaceTempView('artists')
    
    df_update.createOrReplaceTempView('events')
    
    songplays_table = spark.sql("""
                                SELECT
                                events.songplay_id,
                                events.start_time,
                                events.user_id,
                                events.level,
                                songs.song_id,
                                songs.artist_id,
                                events.sessionId as session_id,
                                events.location,
                                events.userAgent as user_agent,
                                year(events.start_time) as year,
                                month(events.start_time) as month
                                FROM events
                                JOIN songs ON events.song = songs.title
                                JOIN artists ON songs.artist_id = artists.artist_id
                                """)

    songplays_table.write.mode('overwrite').partitionBy("year", "month").parquet(output_data+'songplays_activities')


def main():
    spark = create_spark_session()
    input_data = "s3a://udacity-dend/"
    output_data = "s3a://datalakep/"
    
    process_song_data(spark, input_data, output_data)    
    process_log_data(spark, input_data, output_data)


if __name__ == "__main__":
    main()
